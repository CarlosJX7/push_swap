#	ifndef MOVEMENTS_H
#define MOVEMENTS_H

#include "node.h"
void ft_push_a(t_stack *pilaA, t_stack *pilaB);
void ft_push_b(t_stack *pilaA, t_stack *pilaB);

void	ft_rotate_rev_a(t_stack *pila);
void	ft_rotate_rev_b(t_stack *pila);
void	ft_rotate_rev_r(t_stack *pilaA, t_stack *pilaB);

void	ft_rotate_b(t_stack *pila);
void	ft_rotate_a(t_stack *pila);
void	ft_rotate_r(t_stack *pila_A, t_stack *pila_B);

void ft_do_sa(t_stack *pilaA);
void ft_do_sb(t_stack *pilaA);
void ft_do_ss(t_stack *pilaA);

#endif#	ifndef NODE_H
#define NODE_H

#include <stdlib.h>
#include <unistd.h>

typedef struct s_node
{
	int	valor;
	int	index;
	struct s_node *siguiente_nodo;
	struct s_node *anterior_nodo;
}t_node;

typedef struct s_stack
{
	t_node *primer_elemento;
	t_node *ultimo_elemento;
	int cantidad_elementos;
}t_stack;

t_node	*ft_crear_nodo(int valor);
void	ft_nodo_a_pila(t_node *new_nodo, t_stack *pila);
t_node	*ft_cortar_nodo(t_stack *pila);
#endif
#	ifndef STACK_H
#define STACK_H

void	ft_pila_free(t_stack *pila);

#endif#	ifndef UTILS_H
#define UTILS_H
#include "node.h"
int ft_atoi(char *s);
int *ft_pila_to_array(t_stack *pila);
int *ft_ordenar_array(int *array, int n);


#endif#include "movements.h"
#include "node.h"
#include "utils.h"

t_stack *ft_iniciar_pila(t_stack *pila)
{
	pila = malloc(sizeof(t_stack));
	if (!pila)
		return NULL;
	pila->primer_elemento = NULL;
	pila->ultimo_elemento = NULL;
	pila->cantidad_elementos = 0;
	return pila;
}

int	main(int argc, char *argv[])
{
	t_stack	*pila_A;
	t_stack	*pila_B;
	int i;
	int *array_ordenado;

	if (argc < 2)
		return 0;
	pila_A = ft_iniciar_pila(pila_A);
	pila_B = ft_iniciar_pila(pila_B);

	i = 0;
	while (argv[i])
	{
		ft_nodo_a_pila(ft_crear_nodo(ft_atoi(argv[i])), pila_A);
		i++;
	}
	array_ordenado = ft_ordenar_array(ft_pila_to_array(pila_A), pila_A->cantidad_elementos);
	ft_pila_indices(pila_A, array_ordenado);
	
	ft_radix(pila_A, pila_B);
	ft_pila_free(pila_A);
	ft_pila_free(pila_B);
	free(array_ordenado);
	return 0;
}
#include "node.h"
#include "movements.h"
// pasar siempre pila A y B
static void ft_push(t_stack *pilaA, t_stack *pilaB)
{
	t_node *nodo;
	nodo = ft_cortar_nodo(pilaA);
	if (!nodo)
		return ;
	ft_nodo_a_pila(nodo, pilaB);
}

void ft_push_a(t_stack *pilaA, t_stack *pilaB)
{
	ft_push(pilaA, pilaB);
	write(1, "pa", 2);
}

void ft_push_b(t_stack *pilaA, t_stack *pilaB)
{
	ft_push(pilaA, pilaB);
	write(1, "pb", 2);
}#include "node.h"
#include "movements.h"

static	void ft_rotate(t_stack *pila)
{
	t_node *nodo;

	nodo = ft_cortar_nodo(pila);
	nodo->anterior_nodo = pila->ultimo_elemento;
	nodo->siguiente_nodo = NULL;
	pila->ultimo_elemento->siguiente_nodo = nodo;
	pila->ultimo_elemento = nodo;
}

void	ft_rotate_a(t_stack *pila)
{
	ft_rotate(pila);
	write(1, "ra", 2);
}
void	ft_rotate_b(t_stack *pila)
{
	ft_rotate(pila);
	write(1, "rb", 2);
}

void	ft_rotate_r(t_stack *pila_A, t_stack *pila_B)
{
	ft_rotate(pila_A);
	ft_rotate(pila_B);
	write(1, "rr", 2);
}
#include <node.h>
#include "movements.h"

static void	ft_rotate_rev(t_stack *pila)
{
	t_node *nodo;
	t_node *nuevo_final;

	nodo = pila->ultimo_elemento;
	nodo->anterior_nodo = NULL;
	nuevo_final = nodo->anterior_nodo;
	nuevo_final->siguiente_nodo = NULL;
	pila->ultimo_elemento = nuevo_final;
	ft_nodo_a_pila(nodo, pila);
}

void	ft_rotate_rev_a(t_stack *pila)
{
	ft_rotate_rev(pila);
	write(1, "rra", 3);
}
void	ft_rotate_rev_b(t_stack *pila)
{
	ft_rotate_rev(pila);
	write(1, "rrb", 3);
}

void	ft_rotate_rev_r(t_stack *pilaA, t_stack *pilaB)
{
	ft_rotate_rev(pilaA);
	ft_rotate_rev(pilaB);
	write(1, "rrr", 3);
}
#include "node.h"
#include "movements.h"
void ft_swap(t_stack *pila)
{
	t_node *nodoA;
	t_node *nodoB;

	if (pila->cantidad_elementos <= 1)
		return ;
	
	nodoA = ft_cortar_nodo(pila);
	nodoB = ft_cortar_nodo(pila);
	ft_nodo_a_pila(nodoA, pila);
	ft_nodo_a_pila(nodoB, pila);
}

void ft_do_sa(t_stack *pilaA)
{
	ft_swap(pilaA);
	write(1, "sa", 1);
}

void ft_do_sb(t_stack *pilaB)
{
	ft_swap(pilaB);
	write(1, "sb", 1);
}

void ft_do_ss(t_stack *pilaA, t_stack *pilaB)
{
	ft_do_sa(pilaA);
	ft_do_sb(pilaB);
	write(1, "ss", 1);
}#include "node.h"

t_node *ft_crear_nodo(int valor)
{
	t_node *nodo;
	nodo = malloc(sizeof(t_node));
	if (!nodo)
		return NULL;
	nodo->anterior_nodo = NULL;
	nodo->siguiente_nodo = NULL;
	nodo->index = 0;
	nodo->valor = valor;
	return nodo;
}

void ft_nodo_a_pila(t_node *new_nodo, t_stack *pila)
{
	if (pila->cantidad_elementos == 0)
	{
		pila->primer_elemento = new_nodo;
	}
	else
	{
		pila->ultimo_elemento->siguiente_nodo = new_nodo;
		new_nodo->anterior_nodo = pila->ultimo_elemento;
	}
	pila->ultimo_elemento = new_nodo;
	new_nodo->siguiente_nodo = NULL;
	pila->cantidad_elementos++;
}

t_node	*ft_cortar_nodo(t_stack *pila)
{
	t_node	*nodo;
	
	nodo = pila->primer_elemento;
	pila->primer_elemento = nodo->siguiente_nodo;
	pila->primer_elemento->anterior_nodo = NULL;
	nodo->siguiente_nodo = NULL;
	nodo->anterior_nodo = NULL;
	return nodo;
}#include "node.h"

int rotaciones(int n)
{
	int i;

	i = 0;
	while (n > 0)
	{
		n = n >> 1;
		i++;
	}
	return (i);
}

void ft_rellenar_pila(t_stack *pilaA, t_stack *pilaB)
{
	t_node *nodo;

	if (pilaB->cantidad_elementos == 0)
	{
		return ;
	}
	
	nodo = pilaB->primer_elemento;
	while (pilaB->cantidad_elementos > 0)
	{
		
	}
	
}#include "stack.h"
#include "node.h"

void	ft_pila_free(t_stack *pila)
{
	t_node	*nodo;
	t_node	*siguiente;
	if (pila->cantidad_elementos == 0)
		return ;
	
	nodo = pila->primer_elemento;
	while (nodo)
	{
		siguiente = nodo->siguiente_nodo;
		free(nodo);
		nodo = siguiente;
	}
	pila->primer_elemento = NULL;
	pila->ultimo_elemento = NULL;
	pila->cantidad_elementos = 0;
}#include "node.h"


int ft_atoi(char *s);
int *ft_pila_to_array(t_stack *pila)
{
		int *array;
		int i;
		t_node *posicion;

		array = malloc(pila->cantidad_elementos * sizeof(int));
		if (!array)
			return NULL;
		posicion = pila->primer_elemento;
		i = 0;
		while (i < pila->cantidad_elementos)
		{
			array[i] = posicion->valor;
			posicion = posicion->siguiente_nodo;
			i++;
		}
		return array;
}
int *ft_ordenar_array(int *array, int n)
{
	int	i;
	int	j;
	int aux;
	i = 0;
	j = n;
	while (j > 0)
	{
		while (i < j -1)
		{
			if (array[i] > array[i + 1])
			{
				aux = array[i];
				array[i] = array[i + 1];
				array[i + 1] = aux;
			}
			i++;
		}
		i = 0;
		j--;
	}
	return array;
}

void ft_indices_pila(t_stack *pila, int *array)
{
	t_node *nodo;
	int i;

	i = 0;
	nodo = pila->primer_elemento;
	while (nodo)
	{
		nodo->valor = array[i];
		nodo = nodo->siguiente_nodo;
		i++;
	}
}